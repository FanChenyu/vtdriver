# Reason: Druid AST unsupported
# select with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from user where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user",
    "Table": "user"
  }
}

# Reason: Druid AST unsupported
# select aggregation with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# Reason: Druid AST unsupported
# select limit with timeout directive sets QueryTimeout in the route
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from user where 1 != 1",
        "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from user limit :__upper_limit",
        "Table": "user"
      }
    ]
  }
}

# Reason: Druid AST unsupported
# select with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from user where 1 != 1",
    "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user",
    "Table": "user"
  }
}

# Reason: Druid AST unsupported
# select aggregation with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# Reason: Druid AST unsupported
# select aggregation with partial scatter directive - added comments to try to confuse the hint extraction
"/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "/*VT_SPAN_CONTEXT=123*/select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# Reason: Druid AST unsupported
# select limit with partial scatter directive
"select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from user where 1 != 1",
        "Query": "select /*vt+ SCATTER_ERRORS_AS_WARNINGS=1 */ * from user limit :__upper_limit",
        "Table": "user"
      }
    ]
  }
}

# Reason: no need supported
# database calls should be substituted
"select database() from dual"
{
  "QueryType": "SELECT",
  "Original": "select database() from dual",
  "Instructions": {
    "OperatorType": "Projection",
    "Columns": [
      "database()"
    ],
    "Expressions": [
      ":__vtdbname"
    ],
    "Inputs": [
      {
        "OperatorType": "SingleRow"
      }
    ]
  }
}

# Reason: no need supported
# nextval for simple route
"select next value from user"
"NEXT used on a non-sequence table"

# Reason: Pre-implementation
# last_insert_id for unsharded route
"select last_insert_id() as x from main.unsharded"
{
  "QueryType": "SELECT",
  "Original": "select last_insert_id() as x from main.unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select :__lastInsertId as x from unsharded where 1 != 1",
    "Query": "select :__lastInsertId as x from unsharded",
    "Table": "unsharded"
  }
}

# Reason: unsupport
# select from dual on unqualified keyspace
"select @@session.auto_increment_increment from dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}

# Reason: unsupport
# select from dual on sharded keyspace
"select @@session.auto_increment_increment from user.dual"
{
  "QueryType": "SELECT",
  "Original": "select @@session.auto_increment_increment from user.dual",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectReference",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select @@session.auto_increment_increment from dual where 1 != 1",
    "Query": "select @@session.auto_increment_increment from dual",
    "Table": "dual"
  }
}

# Reason: Druid AST unsupported
# Comments
"select /* comment */ user.col from user join user_extra"
{
  "QueryType": "SELECT",
  "Original": "select /* comment */ user.col from user join user_extra",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": [-1],
    "TableName": "user_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.col from user where 1 != 1",
        "Query": "select /* comment */ user.col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select /* comment */ 1 from user_extra",
        "Table": "user_extra"
      }
    ]
  }
}

# Reason: multiple keyspace
# Field query should work for joins select bind vars
"select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm"
{
  "QueryType": "SELECT",
  "Original": "select user.id, (select user.id+outm.m+unsharded.m from unsharded) from user join unsharded outm",
  "Instructions": {
    "OperatorType": "Join",
    "Variant": "Join",
    "JoinColumnIndexes": [-1,1],
    "TableName": "user_unsharded",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select user.id from user where 1 != 1",
        "Query": "select user.id from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select (select :user_id + outm.m + unsharded.m from unsharded where 1 != 1) from unsharded as outm where 1 != 1",
        "Query": "select (select :user_id + outm.m + unsharded.m from unsharded) from unsharded as outm",
        "Table": "unsharded"
      }
    ]
  }
}

# Reason: multiple keyspace
# top level subquery in select
"select a, (select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, (select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, :__sq1 from unsharded where 1 != 1",
        "Query": "select a, :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# Reason: multiple keyspace
# sub-expression subquery in select
"select a, 1+(select col from user) from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select a, 1+(select col from user) from unsharded",
  "Instructions": {
    "OperatorType": "Subquery",
    "Variant": "PulloutValue",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select col from user",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectUnsharded",
        "Keyspace": {
          "Name": "main",
          "Sharded": false
        },
        "FieldQuery": "select a, 1 + :__sq1 from unsharded where 1 != 1",
        "Query": "select a, 1 + :__sq1 from unsharded",
        "Table": "unsharded"
      }
    ]
  }
}

# Reason: Pre-implementation
# union with the same target shard last_insert_id
"select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1"
{
  "QueryType": "SELECT",
  "Original": "select *, last_insert_id() from music where user_id = 1 union select * from user where id = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, :__lastInsertId as `last_insert_id()` from music where 1 != 1 union select * from user where 1 != 1",
    "Query": "select *, :__lastInsertId as `last_insert_id()` from music where user_id = 1 union select * from user where id = 1",
    "Table": "music",
    "Values": [
      1
    ],
    "Vindex": "user_index"
  }
}

#Reason: Druid AST unsupported
"(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1"
{
  "QueryType": "SELECT",
  "Original": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "(select id from unsharded where 1 != 1) union (select id from unsharded where 1 != 1)",
    "Query": "(select id from unsharded order by id asc limit 1) union (select id from unsharded order by id desc limit 1) order by id asc limit 1",
    "Table": "unsharded"
  }
}

# Reason: routing rules
# routing rules: ensure directives are not lost
"select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from route2",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select * from unsharded as route2 where 1 != 1",
    "Query": "select /*vt+ QUERY_TIMEOUT_MS=1000 */ * from unsharded as route2",
    "Table": "unsharded"
  }
}

# Reason: unsupport
# sql_calc_found_rows with limit
"select sql_calc_found_rows * from music limit 100"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music limit 100",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 100,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select * from music where 1 != 1",
            "Query": "select * from music limit :__upper_limit",
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Distinct": "false",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from music where 1 != 1",
            "Query": "select count(*) from music",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# Reason: unsupport
# sql_calc_found_rows with SelectEqualUnique plans
"select sql_calc_found_rows * from music where user_id = 1 limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows * from music where user_id = 1 limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from music where 1 != 1",
        "Query": "select * from music where user_id = 1 limit 2",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      },
      {
        "OperatorType": "Route",
        "Variant": "SelectEqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from music where 1 != 1",
        "Query": "select count(*) from music where user_id = 1",
        "Table": "music",
        "Values": [
          1
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# Reason: unsupport
# sql_calc_found_rows with group by and having
"select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2"
{
  "QueryType": "SELECT",
  "Original": "select sql_calc_found_rows user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id limit 2",
  "Instructions": {
    "OperatorType": "SQL_CALC_FOUND_ROWS",
    "Inputs": [
      {
        "OperatorType": "Limit",
        "Count": 2,
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select user_id, count(id) from music where 1 != 1 group by user_id",
            "Query": "select user_id, count(id) from music group by user_id having count(user_id) = 1 order by user_id asc limit :__upper_limit",
            "Table": "music"
          }
        ]
      },
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Distinct": "false",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) from (select user_id, count(id) from music where 1 != 1 group by user_id) as t where 1 != 1",
            "Query": "select count(*) from (select user_id, count(id) from music group by user_id having count(user_id) = 1) as t",
            "Table": "music"
          }
        ]
      }
    ]
  }
}

# Reason: unsupport
# sql_calc_found_rows in sub queries
"select * from music where user_id IN (select sql_calc_found_rows * from music limit 10)"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS' (errno 1234) (sqlstate 42000)"

# Reason: unsupport
# sql_calc_found_rows in derived table
"select sql_calc_found_rows * from (select sql_calc_found_rows * from music limit 10) t limit 1"
"Incorrect usage/placement of 'SQL_CALC_FOUND_ROWS' (errno 1234) (sqlstate 42000)"